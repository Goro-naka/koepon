name: Production Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      deployment_type:
        description: 'Deployment type'
        required: true
        default: 'blue-green'
        type: choice
        options:
        - blue-green
        - rollback

env:
  NODE_VERSION: '20'

jobs:
  # 本番前検証
  pre-production-validation:
    name: Pre-Production Validation
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: koepon_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: |
          cd client && npm ci
          cd ../api && npm ci
          
      - name: Lint and Type check
        run: |
          cd client && npm run lint && npm run type-check
          cd ../api && npm run lint && npm run build
          
      - name: Full Test Suite
        run: |
          cd client && npm run test:coverage
          cd ../api && npm run test:coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/koepon_test
          
      - name: Security Audit
        run: |
          cd client && npm audit --audit-level=high
          cd ../api && npm audit --audit-level=high
          
      - name: Advanced Security Tests
        run: |
          cd security-tests && npm run test:production-security
          
      - name: Performance Validation
        run: |
          cd performance-tests && npm run test:production-load
          
      - name: Upload Test Reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-production
          path: |
            client/coverage/
            api/coverage/
            security-tests/reports/
            performance-tests/results/

  # Blue-Green デプロイメント決定
  determine-deployment-strategy:
    name: Determine Deployment Strategy
    needs: pre-production-validation
    runs-on: ubuntu-latest
    outputs:
      target_env: ${{ steps.strategy.outputs.target_env }}
      current_env: ${{ steps.strategy.outputs.current_env }}
    
    steps:
      - name: Determine Blue-Green Strategy
        id: strategy
        run: |
          # 現在のproduction環境を確認
          CURRENT=$(curl -s https://koepon.app/api/environment || echo "blue")
          if [ "$CURRENT" = "blue" ]; then
            echo "target_env=green" >> $GITHUB_OUTPUT
            echo "current_env=blue" >> $GITHUB_OUTPUT
          else
            echo "target_env=blue" >> $GITHUB_OUTPUT
            echo "current_env=green" >> $GITHUB_OUTPUT
          fi
          
          echo "Current environment: $CURRENT"
          echo "Target environment: $([ "$CURRENT" = "blue" ] && echo "green" || echo "blue")"

  # Supabase 本番環境デプロイ
  deploy-database:
    name: Deploy Production Database
    needs: [pre-production-validation, determine-deployment-strategy]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest
          
      - name: Link to Production Project
        run: supabase link --project-ref ${{ secrets.SUPABASE_PRODUCTION_PROJECT_ID }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          
      - name: Database Migration (Dry Run)
        run: |
          supabase db plan --project-ref ${{ secrets.SUPABASE_PRODUCTION_PROJECT_ID }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          
      - name: Deploy Database Changes
        run: supabase db push
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          
      - name: Deploy Edge Functions
        run: supabase functions deploy --project-ref ${{ secrets.SUPABASE_PRODUCTION_PROJECT_ID }}
        env:
          SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
          
      - name: Verify Database Health
        run: |
          # データベース接続確認
          curl -f "$SUPABASE_URL/rest/v1/health_check?select=id" \
            -H "apikey: $SUPABASE_ANON_KEY"
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_PRODUCTION_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_PRODUCTION_ANON_KEY }}

  # Frontend Blue-Green デプロイ
  deploy-frontend:
    name: Deploy Frontend (${{ needs.determine-deployment-strategy.outputs.target_env }})
    needs: [deploy-database, determine-deployment-strategy]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Vercel CLI
        run: npm install -g vercel
        
      - name: Deploy to Vercel (${{ needs.determine-deployment-strategy.outputs.target_env }})
        run: |
          cd client
          vercel --token ${{ secrets.VERCEL_TOKEN }} \
            --env NODE_ENV=production \
            --env NEXT_PUBLIC_SUPABASE_URL=${{ secrets.SUPABASE_PRODUCTION_URL }} \
            --env NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.SUPABASE_PRODUCTION_ANON_KEY }} \
            --env SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_PRODUCTION_SERVICE_KEY }} \
            --env REDIS_URL=${{ secrets.UPSTASH_PRODUCTION_REDIS_URL }} \
            --env NEXT_PUBLIC_SITE_URL=https://${{ needs.determine-deployment-strategy.outputs.target_env }}.koepon.app \
            --env NEXT_PUBLIC_ENVIRONMENT=${{ needs.determine-deployment-strategy.outputs.target_env }} \
            --build-env NODE_ENV=production \
            --scope ${{ secrets.VERCEL_ORG_ID }} \
            --project-name koepon-production-${{ needs.determine-deployment-strategy.outputs.target_env }} \
            --prod
            
      - name: Set Custom Domain Alias
        run: |
          # Green環境にdeployした場合のみ、aliasを設定
          vercel alias set \
            koepon-production-${{ needs.determine-deployment-strategy.outputs.target_env }}.vercel.app \
            ${{ needs.determine-deployment-strategy.outputs.target_env }}.koepon.app \
            --token ${{ secrets.VERCEL_TOKEN }} \
            --scope ${{ secrets.VERCEL_ORG_ID }}

  # Backend API Blue-Green デプロイ  
  deploy-backend:
    name: Deploy Backend API (${{ needs.determine-deployment-strategy.outputs.target_env }})
    needs: [deploy-database, determine-deployment-strategy]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Vercel CLI
        run: npm install -g vercel
        
      - name: Deploy API to Vercel
        run: |
          cd api
          vercel --token ${{ secrets.VERCEL_TOKEN }} \
            --env NODE_ENV=production \
            --env SUPABASE_URL=${{ secrets.SUPABASE_PRODUCTION_URL }} \
            --env SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_PRODUCTION_SERVICE_KEY }} \
            --env REDIS_URL=${{ secrets.UPSTASH_PRODUCTION_REDIS_URL }} \
            --env STRIPE_SECRET_KEY=${{ secrets.STRIPE_LIVE_SECRET_KEY }} \
            --env JWT_SECRET=${{ secrets.JWT_SECRET }} \
            --scope ${{ secrets.VERCEL_ORG_ID }} \
            --project-name koepon-api-production-${{ needs.determine-deployment-strategy.outputs.target_env }} \
            --prod

  # Green環境統合テスト
  green-environment-testing:
    name: Green Environment Integration Testing
    needs: [deploy-frontend, deploy-backend, determine-deployment-strategy]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install Playwright
        run: |
          cd client/e2e
          npm ci
          npx playwright install --with-deps
          
      - name: Wait for Green Deployment
        run: sleep 60
        
      - name: Health Check Green Environment
        run: |
          # 5分間のヘルスチェック
          for i in {1..30}; do
            curl -f https://${{ needs.determine-deployment-strategy.outputs.target_env }}.koepon.app/api/health
            if [ $? -eq 0 ]; then
              echo "Health check passed (attempt $i)"
              break
            fi
            sleep 10
          done
          
      - name: Run Smoke Tests (Green)
        run: |
          cd client/e2e
          npx playwright test --config=playwright.production.config.ts
        env:
          PRODUCTION_BASE_URL: https://${{ needs.determine-deployment-strategy.outputs.target_env }}.koepon.app
          PRODUCTION_API_URL: https://koepon-api-production-${{ needs.determine-deployment-strategy.outputs.target_env }}.vercel.app
          
      - name: Run Load Testing (Green) 
        run: |
          cd performance-tests
          timeout 30s k6 run --vus 10 --duration 30s load/normal-load.test.js
        env:
          K6_BASE_URL: https://${{ needs.determine-deployment-strategy.outputs.target_env }}.koepon.app
          
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: green-environment-test-results
          path: |
            client/e2e/test-results/
            performance-tests/results/

  # Blue-Green トラフィック切り替え
  traffic-switchover:
    name: Blue-Green Traffic Switchover
    needs: [green-environment-testing, determine-deployment-strategy]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Notify Pre-Switchover
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "🔄 本番環境 Blue-Green 切り替え開始",
              blocks: [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn", 
                    "text": "🔄 *本番環境トラフィック切り替え開始*\n\n• 現在: ${{ needs.determine-deployment-strategy.outputs.current_env }}\n• 切り替え先: ${{ needs.determine-deployment-strategy.outputs.target_env }}\n• コミット: `${{ github.sha }}`"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          
      - name: Switch Traffic to Green Environment
        run: |
          # Cloudflare DNS API で koepon.app の CNAME を更新
          curl -X PUT "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records/${{ secrets.CLOUDFLARE_DNS_RECORD_ID }}" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{
              "type": "CNAME",
              "name": "koepon.app", 
              "content": "${{ needs.determine-deployment-strategy.outputs.target_env }}.koepon.app",
              "ttl": 60
            }'
            
      - name: Verify DNS Propagation
        run: |
          # DNS propagation確認 (最大5分待機)
          for i in {1..30}; do
            RESOLVED=$(dig +short koepon.app | head -1)
            EXPECTED="${{ needs.determine-deployment-strategy.outputs.target_env }}.koepon.app"
            if [[ "$RESOLVED" == *"$EXPECTED"* ]]; then
              echo "DNS propagation successful: $RESOLVED"
              break
            fi
            echo "Waiting for DNS propagation... (attempt $i)"
            sleep 10
          done
          
      - name: Post-Switchover Monitoring (5 minutes)
        run: |
          # 5分間の本番監視
          END_TIME=$(($(date +%s) + 300))  # 5分後
          while [ $(date +%s) -lt $END_TIME ]; do
            # ヘルスチェック
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://koepon.app/api/health)
            if [ "$HTTP_STATUS" -ne "200" ]; then
              echo "❌ Health check failed: HTTP $HTTP_STATUS"
              exit 1
            fi
            
            echo "✅ Health check passed ($(date))"
            sleep 30
          done
          
      - name: Mark Old Environment as Standby
        run: |
          echo "Old environment (${{ needs.determine-deployment-strategy.outputs.current_env }}) now on standby"
          echo "New production environment: ${{ needs.determine-deployment-strategy.outputs.target_env }}"

  # 切り替え完了通知
  deployment-success:
    name: Deployment Success Notification
    needs: [traffic-switchover, determine-deployment-strategy]
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Generate Deployment Report
        run: |
          echo "# 本番環境デプロイ完了 🎉" > deployment-report.md
          echo "" >> deployment-report.md
          echo "## デプロイ情報" >> deployment-report.md
          echo "- **デプロイ日時**: $(date)" >> deployment-report.md  
          echo "- **コミット**: ${{ github.sha }}" >> deployment-report.md
          echo "- **環境**: ${{ needs.determine-deployment-strategy.outputs.target_env }}" >> deployment-report.md
          echo "- **前環境**: ${{ needs.determine-deployment-strategy.outputs.current_env }} (standby)" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "## 環境URL" >> deployment-report.md
          echo "- **本番**: https://koepon.app" >> deployment-report.md
          echo "- **API**: https://api.koepon.app" >> deployment-report.md  
          echo "- **Standby**: https://${{ needs.determine-deployment-strategy.outputs.current_env }}.koepon.app" >> deployment-report.md
          
      - name: Notify Success
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🎉 *本番環境デプロイ完了*
            
            **URL**: https://koepon.app
            **API**: https://api.koepon.app
            **環境**: ${{ needs.determine-deployment-strategy.outputs.target_env }}
            **コミット**: `${{ github.sha }}`
            
            Blue-Green デプロイメント成功！
            スタンバイ環境: ${{ needs.determine-deployment-strategy.outputs.current_env }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          
      - name: Update GitHub Deployment Status
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment?.id || 0,
              state: 'success',
              target_url: 'https://koepon.app',
              description: `Production deployment successful (${needs.determine-deployment-strategy.outputs.target_env})`
            });

  # 失敗時の緊急ロールバック
  emergency-rollback:
    name: Emergency Rollback
    needs: [traffic-switchover, determine-deployment-strategy] 
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
      - name: Immediate Rollback
        run: |
          # 即座に旧環境にロールバック
          curl -X PUT "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records/${{ secrets.CLOUDFLARE_DNS_RECORD_ID }}" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{
              "type": "CNAME",
              "name": "koepon.app",
              "content": "${{ needs.determine-deployment-strategy.outputs.current_env }}.koepon.app", 
              "ttl": 60
            }'
            
      - name: Verify Rollback
        run: |
          # ロールバック確認
          sleep 30
          curl -f https://koepon.app/api/health
          
      - name: Notify Emergency Rollback
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            🚨 *本番環境デプロイ失敗・緊急ロールバック実施*
            
            **ロールバック先**: ${{ needs.determine-deployment-strategy.outputs.current_env }}
            **失敗環境**: ${{ needs.determine-deployment-strategy.outputs.target_env }}
            **コミット**: `${{ github.sha }}`
            
            サービス復旧済み。原因調査が必要です。
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # 手動ロールバック (workflow_dispatch時)
  manual-rollback:
    name: Manual Rollback
    runs-on: ubuntu-latest
    if: github.event.inputs.deployment_type == 'rollback'
    
    steps:
      - name: Determine Current Environment
        id: current
        run: |
          CURRENT=$(curl -s https://koepon.app/api/environment || echo "unknown")
          if [ "$CURRENT" = "blue" ]; then
            echo "rollback_to=green" >> $GITHUB_OUTPUT
          else
            echo "rollback_to=blue" >> $GITHUB_OUTPUT  
          fi
          echo "Current: $CURRENT, Rolling back to: $([ "$CURRENT" = "blue" ] && echo "green" || echo "blue")"
          
      - name: Execute Rollback
        run: |
          curl -X PUT "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records/${{ secrets.CLOUDFLARE_DNS_RECORD_ID }}" \
            -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data '{
              "type": "CNAME",
              "name": "koepon.app",
              "content": "${{ steps.current.outputs.rollback_to }}.koepon.app",
              "ttl": 60
            }'
            
      - name: Notify Manual Rollback  
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              "text": "🔄 手動ロールバック完了",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "🔄 *手動ロールバック完了*\n\n• ロールバック先: ${{ steps.current.outputs.rollback_to }}\n• 実行者: ${{ github.actor }}\n• 時刻: $(date)"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}