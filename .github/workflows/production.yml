name: Deploy to Production

on:
  release:
    types: [published]

jobs:
  test:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      # Full test suite for production
      - name: Install API Dependencies
        run: npm ci
        
      - name: Run API Tests with Coverage
        run: npm run test:coverage
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL_PRODUCTION }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY_PRODUCTION }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

      - name: Install Client Dependencies
        run: npm ci
        working-directory: ./client
        
      - name: Run Client Tests with Coverage
        run: npm run test:coverage
        working-directory: ./client
        
      - name: Run E2E Tests
        run: npm run test:e2e
        working-directory: ./client
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL_PRODUCTION }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY_PRODUCTION }}

  security-audit:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run npm audit
        run: npm audit --audit-level=critical
        
      - name: Run client npm audit
        run: npm audit --audit-level=critical
        working-directory: ./client
        
      - name: Run Security Tests
        run: npm run test:security
        working-directory: ./security-tests

  deploy-api:
    needs: [test, security-audit]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      # API deployment will be implemented when we choose hosting platform
      # Options: Railway, Render, Google Cloud Run, AWS ECS
      - name: Deploy API (TBD)
        run: echo "API deployment to be implemented"

  deploy-frontend:
    needs: [test, security-audit]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID_PROD }}
          working-directory: ./client
          vercel-args: '--prod'

  post-deploy:
    needs: [deploy-api, deploy-frontend]
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Health Check
        run: |
          # Health check for deployed services
          curl -f ${{ secrets.FRONTEND_URL }}/api/health || exit 1
          
      - name: Notify Deployment Success
        uses: 8398a7/action-slack@v3
        if: success()
        with:
          status: success
          text: 'Production deployment successful! ðŸš€'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: Notify Deployment Failure  
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: 'Production deployment failed! ðŸš¨'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}