name: Security Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly security scans on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

jobs:
  security-tests:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: koepon_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        cd client && npm ci
        cd ../security-tests && npm ci

    - name: Setup test environment
      run: |
        cp .env.example .env.test
        export NODE_ENV=test

    - name: Start application for testing
      run: |
        cd client
        npm run build
        npm run start &
        sleep 30
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/koepon_test

    - name: Wait for application to be ready
      run: |
        timeout 60s bash -c 'until curl -f http://localhost:3000/health; do sleep 2; done'

    - name: Run security unit tests
      run: |
        cd security-tests
        npm run test:security
      env:
        BASE_URL: http://localhost:3000
        API_URL: http://localhost:3000/api

    - name: Setup OWASP ZAP
      run: |
        docker pull owasp/zap2docker-stable:latest

    - name: Run OWASP ZAP baseline scan
      run: |
        cd security-tests
        mkdir -p zap-reports
        docker run --rm \
          --network="host" \
          -v $(pwd)/zap-reports:/zap/wrk:rw \
          owasp/zap2docker-stable:latest \
          zap-baseline.py \
          -t http://localhost:3000 \
          -J zap-baseline-report.json \
          -r zap-baseline-report.html \
          || true

    - name: Run OWASP ZAP full scan
      if: github.event_name == 'schedule'
      run: |
        cd security-tests
        docker run --rm \
          --network="host" \
          -v $(pwd)/zap-reports:/zap/wrk:rw \
          owasp/zap2docker-stable:latest \
          zap-full-scan.py \
          -t http://localhost:3000 \
          -J zap-full-report.json \
          -r zap-full-report.html \
          || true

    - name: Generate security report
      run: |
        cd security-tests
        node scripts/generate-security-report.js

    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          security-tests/reports/
          security-tests/zap-reports/
        retention-days: 30

    - name: Comment security results on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          try {
            const report = JSON.parse(fs.readFileSync('security-tests/reports/security-summary.json', 'utf8'));
            const comment = `
            ## üîí Security Test Results
            
            - **Overall Score:** ${report.summary.overallScore}/100
            - **Tests Passed:** ${report.summary.testPassRate}%
            - **Vulnerabilities:** ${report.summary.totalVulnerabilities}
            - **ASVS Compliance:** ${report.summary.complianceRate}%
            
            ${report.summary.totalVulnerabilities > 0 ? '‚ö†Ô∏è Please review and address the identified vulnerabilities before merging.' : '‚úÖ No security issues detected.'}
            
            [View Full Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          } catch (error) {
            console.log('Could not post security results comment:', error.message);
          }

    - name: Check security gate
      run: |
        cd security-tests
        node scripts/check-security-gate.js
        
    - name: Notify security team
      if: failure()
      run: |
        echo "üö® Security tests failed! High-risk vulnerabilities detected."
        echo "Notify security team for immediate review."
        # In real implementation, would send alerts to security team