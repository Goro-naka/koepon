const fs = require('fs')
const path = require('path')

class SecurityReportGenerator {
  constructor() {
    this.reportDir = './reports'
    this.zapReportDir = './zap-reports'
    this.template = this.loadTemplate()
  }

  loadTemplate() {
    return `
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Koepon Security Assessment Report</title>
    <style>
        body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; margin: 0; padding: 20px; background: #f5f5f5; }
        .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .header { border-bottom: 3px solid #2563eb; padding-bottom: 20px; margin-bottom: 30px; }
        .header h1 { color: #1e40af; margin: 0; font-size: 2.5em; }
        .header .subtitle { color: #64748b; font-size: 1.1em; margin-top: 5px; }
        .section { margin: 30px 0; }
        .section h2 { color: #1e40af; border-left: 4px solid #3b82f6; padding-left: 16px; }
        .metrics { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin: 20px 0; }
        .metric { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 8px; text-align: center; }
        .metric .value { font-size: 2.5em; font-weight: bold; margin-bottom: 5px; }
        .metric .label { font-size: 0.9em; opacity: 0.9; }
        .status-good { background: linear-gradient(135deg, #84fab0 0%, #8fd3f4 100%); }
        .status-warning { background: linear-gradient(135deg, #ffa726 0%, #fb8c00 100%); }
        .status-critical { background: linear-gradient(135deg, #ff5722 0%, #d32f2f 100%); }
        .test-results { background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0; }
        .test-category { margin: 15px 0; padding: 15px; border-left: 4px solid #e2e8f0; background: white; }
        .test-pass { border-left-color: #10b981; }
        .test-fail { border-left-color: #ef4444; }
        .vulnerability-list { list-style: none; padding: 0; }
        .vulnerability { background: white; margin: 10px 0; padding: 15px; border-radius: 6px; border-left: 4px solid #64748b; }
        .vuln-high { border-left-color: #dc2626; background: #fef2f2; }
        .vuln-medium { border-left-color: #d97706; background: #fffbeb; }
        .vuln-low { border-left-color: #059669; background: #f0fdf4; }
        .recommendations { background: #eff6ff; padding: 20px; border-radius: 8px; border: 1px solid #bfdbfe; }
        .footer { text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #e2e8f0; color: #64748b; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>🔒 Koepon Security Assessment Report</h1>
            <div class="subtitle">Generated on {{timestamp}} | OWASP ASVS Level 2 Assessment</div>
        </div>

        <div class="section">
            <h2>📊 Security Metrics Overview</h2>
            <div class="metrics">
                <div class="metric {{overallStatusClass}}">
                    <div class="value">{{overallScore}}</div>
                    <div class="label">Overall Security Score</div>
                </div>
                <div class="metric {{testStatusClass}}">
                    <div class="value">{{testPassRate}}%</div>
                    <div class="label">Tests Passed</div>
                </div>
                <div class="metric {{vulnStatusClass}}">
                    <div class="value">{{totalVulnerabilities}}</div>
                    <div class="label">Vulnerabilities Found</div>
                </div>
                <div class="metric {{complianceStatusClass}}">
                    <div class="value">{{complianceRate}}%</div>
                    <div class="label">ASVS Compliance</div>
                </div>
            </div>
        </div>

        <div class="section">
            <h2>🧪 Test Results Summary</h2>
            <div class="test-results">
                {{testResults}}
            </div>
        </div>

        <div class="section">
            <h2>🚨 Vulnerability Assessment</h2>
            {{vulnerabilitySection}}
        </div>

        <div class="section">
            <h2>📋 OWASP ASVS Compliance</h2>
            {{complianceSection}}
        </div>

        <div class="section">
            <h2>💡 Security Recommendations</h2>
            <div class="recommendations">
                {{recommendations}}
            </div>
        </div>

        <div class="footer">
            <p>Report generated by Koepon Security Test Suite v1.0.0</p>
            <p>Based on OWASP ASVS 4.0.3 and OWASP Top 10 2021</p>
        </div>
    </div>
</body>
</html>
    `
  }

  async generateReport() {
    console.log('📊 Generating security assessment report...')
    
    const timestamp = new Date().toISOString()
    const testResults = await this.collectTestResults()
    const vulnerabilities = await this.collectVulnerabilities()
    const compliance = this.assessCompliance(testResults)
    
    const reportData = {
      timestamp,
      testResults,
      vulnerabilities,
      compliance,
      overallScore: this.calculateOverallScore(testResults, vulnerabilities),
      testPassRate: this.calculateTestPassRate(testResults),
      totalVulnerabilities: vulnerabilities.high.length + vulnerabilities.medium.length + vulnerabilities.low.length,
      complianceRate: compliance.overall
    }
    
    const htmlReport = this.generateHTMLReport(reportData)
    const jsonReport = this.generateJSONReport(reportData)
    
    // Save reports
    fs.writeFileSync(path.join(this.reportDir, 'security-summary.html'), htmlReport)
    fs.writeFileSync(path.join(this.reportDir, 'security-summary.json'), JSON.stringify(jsonReport, null, 2))
    
    console.log('✅ Security report generated successfully')
    console.log(`📄 HTML Report: ${path.join(this.reportDir, 'security-summary.html')}`)
    console.log(`📄 JSON Report: ${path.join(this.reportDir, 'security-summary.json')}`)
    
    return reportData
  }

  async collectTestResults() {
    // Mock test results for demonstration (in real implementation, would parse Jest output)
    return {
      authentication: { passed: 0, failed: 15, total: 15 },
      inputValidation: { passed: 0, failed: 20, total: 20 },
      sessionManagement: { passed: 0, failed: 10, total: 10 },
      encryption: { passed: 0, failed: 12, total: 12 },
      errorHandling: { passed: 0, failed: 8, total: 8 }
    }
  }

  async collectVulnerabilities() {
    const zapReportPath = path.join(this.zapReportDir, 'security-report.json')
    
    if (!fs.existsSync(zapReportPath)) {
      return { high: [], medium: [], low: [] }
    }
    
    try {
      const zapReport = JSON.parse(fs.readFileSync(zapReportPath, 'utf8'))
      const vulnerabilities = { high: [], medium: [], low: [] }
      
      if (zapReport.site && zapReport.site[0] && zapReport.site[0].alerts) {
        zapReport.site[0].alerts.forEach(alert => {
          const risk = alert.riskdesc.toLowerCase()
          if (risk.includes('high')) {
            vulnerabilities.high.push(alert)
          } else if (risk.includes('medium')) {
            vulnerabilities.medium.push(alert)
          } else {
            vulnerabilities.low.push(alert)
          }
        })
      }
      
      return vulnerabilities
    } catch (error) {
      console.error('Failed to parse ZAP report:', error)
      return { high: [], medium: [], low: [] }
    }
  }

  assessCompliance(testResults) {
    const categories = Object.keys(testResults)
    const totalTests = categories.reduce((sum, cat) => sum + testResults[cat].total, 0)
    const passedTests = categories.reduce((sum, cat) => sum + testResults[cat].passed, 0)
    
    return {
      overall: Math.round((passedTests / totalTests) * 100),
      categories: {
        authentication: Math.round((testResults.authentication.passed / testResults.authentication.total) * 100),
        inputValidation: Math.round((testResults.inputValidation.passed / testResults.inputValidation.total) * 100),
        sessionManagement: Math.round((testResults.sessionManagement.passed / testResults.sessionManagement.total) * 100),
        encryption: Math.round((testResults.encryption.passed / testResults.encryption.total) * 100),
        errorHandling: Math.round((testResults.errorHandling.passed / testResults.errorHandling.total) * 100)
      }
    }
  }

  calculateOverallScore(testResults, vulnerabilities) {
    const testScore = this.calculateTestPassRate(testResults)
    const vulnPenalty = (vulnerabilities.high.length * 20) + (vulnerabilities.medium.length * 5)
    return Math.max(0, testScore - vulnPenalty)
  }

  calculateTestPassRate(testResults) {
    const categories = Object.keys(testResults)
    const totalTests = categories.reduce((sum, cat) => sum + testResults[cat].total, 0)
    const passedTests = categories.reduce((sum, cat) => sum + testResults[cat].passed, 0)
    return Math.round((passedTests / totalTests) * 100)
  }

  generateHTMLReport(data) {
    let html = this.template
    
    // Replace template variables
    html = html.replace('{{timestamp}}', data.timestamp)
    html = html.replace('{{overallScore}}', data.overallScore)
    html = html.replace('{{testPassRate}}', data.testPassRate)
    html = html.replace('{{totalVulnerabilities}}', data.totalVulnerabilities)
    html = html.replace('{{complianceRate}}', data.complianceRate)
    
    // Status classes based on scores
    html = html.replace('{{overallStatusClass}}', this.getStatusClass(data.overallScore))
    html = html.replace('{{testStatusClass}}', this.getStatusClass(data.testPassRate))
    html = html.replace('{{vulnStatusClass}}', data.totalVulnerabilities === 0 ? 'status-good' : 'status-warning')
    html = html.replace('{{complianceStatusClass}}', this.getStatusClass(data.complianceRate))
    
    // Generate detailed sections
    html = html.replace('{{testResults}}', this.generateTestResultsHTML(data.testResults))
    html = html.replace('{{vulnerabilitySection}}', this.generateVulnerabilityHTML(data.vulnerabilities))
    html = html.replace('{{complianceSection}}', this.generateComplianceHTML(data.compliance))
    html = html.replace('{{recommendations}}', this.generateRecommendationsHTML(data))
    
    return html
  }

  generateJSONReport(data) {
    return {
      metadata: {
        generatedAt: data.timestamp,
        reportVersion: '1.0.0',
        assessmentStandard: 'OWASP ASVS 4.0.3'
      },
      summary: {
        overallScore: data.overallScore,
        testPassRate: data.testPassRate,
        totalVulnerabilities: data.totalVulnerabilities,
        complianceRate: data.complianceRate
      },
      testResults: data.testResults,
      vulnerabilities: data.vulnerabilities,
      compliance: data.compliance,
      recommendations: this.generateRecommendationsList(data)
    }
  }

  getStatusClass(score) {
    if (score >= 80) return 'status-good'
    if (score >= 60) return 'status-warning'
    return 'status-critical'
  }

  generateTestResultsHTML(testResults) {
    return Object.entries(testResults).map(([category, results]) => {
      const passRate = Math.round((results.passed / results.total) * 100)
      const statusClass = results.passed === results.total ? 'test-pass' : 'test-fail'
      
      return `
        <div class="test-category ${statusClass}">
          <h3>${this.formatCategoryName(category)}</h3>
          <p>Passed: ${results.passed}/${results.total} (${passRate}%)</p>
          <div class="progress-bar">
            <div class="progress" style="width: ${passRate}%"></div>
          </div>
        </div>
      `
    }).join('')
  }

  generateVulnerabilityHTML(vulnerabilities) {
    if (vulnerabilities.high.length === 0 && vulnerabilities.medium.length === 0 && vulnerabilities.low.length === 0) {
      return '<p>✅ No vulnerabilities detected</p>'
    }
    
    let html = '<ul class="vulnerability-list">'
    
    vulnerabilities.high.forEach(vuln => {
      html += `<li class="vulnerability vuln-high"><strong>HIGH:</strong> ${vuln.name}</li>`
    })
    
    vulnerabilities.medium.forEach(vuln => {
      html += `<li class="vulnerability vuln-medium"><strong>MEDIUM:</strong> ${vuln.name}</li>`
    })
    
    vulnerabilities.low.forEach(vuln => {
      html += `<li class="vulnerability vuln-low"><strong>LOW:</strong> ${vuln.name}</li>`
    })
    
    html += '</ul>'
    return html
  }

  generateComplianceHTML(compliance) {
    let html = `<p>Overall ASVS Compliance: <strong>${compliance.overall}%</strong></p><ul>`
    
    Object.entries(compliance.categories).forEach(([category, score]) => {
      const status = score >= 80 ? '✅' : score >= 60 ? '⚠️' : '❌'
      html += `<li>${status} ${this.formatCategoryName(category)}: ${score}%</li>`
    })
    
    html += '</ul>'
    return html
  }

  generateRecommendationsHTML(data) {
    const recommendations = this.generateRecommendationsList(data)
    return '<ul>' + recommendations.map(rec => `<li>${rec}</li>`).join('') + '</ul>'
  }

  generateRecommendationsList(data) {
    const recommendations = []
    
    if (data.vulnerabilities.high.length > 0) {
      recommendations.push('🚨 <strong>Critical:</strong> Address all high-risk vulnerabilities immediately')
    }
    
    if (data.testPassRate < 80) {
      recommendations.push('🔧 Implement missing security controls to improve test pass rate')
    }
    
    if (data.complianceRate < 95) {
      recommendations.push('📋 Review OWASP ASVS requirements and implement missing controls')
    }
    
    recommendations.push('🔒 Enable automated security scanning in CI/CD pipeline')
    recommendations.push('📚 Conduct security awareness training for development team')
    recommendations.push('🔄 Schedule monthly security assessments')
    
    return recommendations
  }

  formatCategoryName(category) {
    const names = {
      authentication: 'Authentication & Authorization',
      inputValidation: 'Input Validation',
      sessionManagement: 'Session Management', 
      encryption: 'Encryption & Cryptography',
      errorHandling: 'Error Handling & Logging'
    }
    return names[category] || category
  }
}

// Main execution
async function main() {
  try {
    const generator = new SecurityReportGenerator()
    const report = await generator.generateReport()
    
    console.log('\n🎯 Security Assessment Summary:')
    console.log(`Overall Score: ${report.overallScore}/100`)
    console.log(`Test Pass Rate: ${report.testPassRate}%`)
    console.log(`Vulnerabilities: ${report.totalVulnerabilities}`)
    console.log(`ASVS Compliance: ${report.complianceRate}%`)
    
    if (report.vulnerabilities.high.length > 0) {
      console.log(`\n❌ CRITICAL: ${report.vulnerabilities.high.length} high-risk vulnerabilities found!`)
      process.exit(1)
    } else if (report.vulnerabilities.medium.length > 5) {
      console.log(`\n⚠️  WARNING: ${report.vulnerabilities.medium.length} medium-risk vulnerabilities found`)
      process.exit(1)
    } else {
      console.log('\n✅ Security assessment passed!')
      process.exit(0)
    }
    
  } catch (error) {
    console.error('❌ Security report generation failed:', error.message)
    process.exit(1)
  }
}

if (require.main === module) {
  main()
}

module.exports = SecurityReportGenerator